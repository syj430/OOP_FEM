import re           # TODO:  많이 쓰임
import numpy as np
from matplotlib import pyplot as plt

class MATERIAL:
    def __init__(self, name, elastic, plastic):

        self.name = name
        self.elastic = elastic
        self.plastic = plastic

    def mat_info(self):
        print(" ")
        print("<MATERIAL> ")
        print("----------------------------------------------------------------------------")
        print("name         =", self.name)
        print("elastic      =", self.elastic)
        print("plastic      =", self.plastic)
        print("----------------------------------------------------------------------------")

    def ELAS(self):
        print('*elastic')
        e = self.elastic
        del e[0]

        for i in range(0,len(e)):
            s = [float(s) for s in re.findall(r"[-+]?\d*\.\d+|\d+", e[i])]
        return s


    def PLAS(self):
        print('*plastic')
        e = self.plastic
        del e[0]
        print(len(e))
        d=[]
        for i in range(0,len(e)):
            s = [float(s) for s in re.findall(r"[-+]?\d*\.\d+|\d+", e[i])]
            d.append(s)
        d = np.array(d)


        # SS_plot
        Yield = d[:,0]   # Yield strength
        Pstrn = d[:,1]   # plastic strain

        plt.figure()
        plt.plot(Pstrn, Yield)
        plt.show()

        # return d, Yield, Pstrn

    # def SS_plot(self, Yield, Pstrn):
    #     print(Yield)




# if __name__ == "__main__":
#
#     nameeee = 'mat_1'
#     elass = ['Elastic', '199950., 0.29']
#     plass = ['Plastic', '    260.,   0.', ' 299.968, 0.01', ' 327.238, 0.02', ' 348.422, 0.03', '  365.95, 0.04',
#                     ' 381.009, 0.05', ' 394.275, 0.06', ' 406.173, 0.07', '  416.99, 0.08', ' 426.926, 0.09',
#                     ' 436.131,  0.1', ' 444.717, 0.11', ' 452.773, 0.12', ' 460.367, 0.13', ' 467.557, 0.14',
#                     ' 474.389, 0.15', ' 480.901, 0.16', ' 487.125, 0.17', ' 493.089, 0.18', ' 498.817, 0.19',
#                     ' 504.329,  0.2', ' 509.643, 0.21', ' 514.775, 0.22', ' 519.737, 0.23', ' 524.544, 0.24',
#                     ' 529.204, 0.25', ' 533.729, 0.26', ' 538.126, 0.27', ' 542.405, 0.28', ' 546.571, 0.29',
#                     ' 550.632,  0.3', ' 554.593, 0.31', '  558.46, 0.32', ' 562.237, 0.33', '  565.93, 0.34',
#                     ' 569.543, 0.35', ' 573.079, 0.36', ' 576.542, 0.37', ' 579.936, 0.38', ' 583.264, 0.39',
#                     ' 586.527,  0.4', '  589.73, 0.41', ' 592.875, 0.42', ' 595.964, 0.43', '    599., 0.44',
#                     ' 601.983, 0.45', ' 604.918, 0.46', ' 607.804, 0.47', ' 610.644, 0.48', '  613.44, 0.49',
#                     ' 616.194,  0.5', ' 618.906, 0.51', ' 621.578, 0.52', ' 624.211, 0.53', ' 626.807, 0.54',
#                     ' 629.367, 0.55', ' 631.892, 0.56', ' 634.383, 0.57', ' 636.841, 0.58', ' 639.267, 0.59',
#                     ' 641.662,  0.6', ' 644.027, 0.61', ' 646.363, 0.62', '  648.67, 0.63', '  650.95, 0.64',
#                     ' 653.203, 0.65', ' 655.429, 0.66', '  657.63, 0.67', ' 659.807, 0.68', ' 661.959, 0.69',
#                     ' 664.087,  0.7', ' 666.193, 0.71', ' 668.276, 0.72', ' 670.337, 0.73', ' 672.376, 0.74',
#                     ' 674.395, 0.75', ' 676.394, 0.76', ' 678.372, 0.77', ' 680.331, 0.78', ' 682.271, 0.79',
#                     ' 684.192,  0.8', ' 686.095, 0.81', ' 687.981, 0.82', ' 689.849, 0.83', ' 691.699, 0.84',
#                     ' 693.533, 0.85', ' 695.351, 0.86', ' 697.152, 0.87', ' 698.938, 0.88', ' 700.709, 0.89',
#                     ' 702.464,  0.9', ' 704.204, 0.91', '  705.93, 0.92', ' 707.642, 0.93', ' 709.339, 0.94',
#                     ' 711.023, 0.95', ' 712.694, 0.96', ' 714.351, 0.97', ' 715.995, 0.98', ' 717.626, 0.99',
#                     ' 719.245,   1.']
#     # print(type(elass))
#     print(type(plass))
#
# a = MATERIAL(nameeee, elass, plass)
# ans_e = a.ELAS()
# ans_p = a.PLAS()
# b = np.arange(10)
# # ans_p = np.array(ans_p)
# print(ans_p)
# print(type(ans_p))
#
# print(b)
# print(type(b))
#
# # print(ans_p[0][0])
# # print(ans_p[0][1])
# # print(a)